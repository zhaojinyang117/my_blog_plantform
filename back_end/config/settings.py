"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
<https://docs.djangoproject.com/en/5.2/topics/settings/>

For the full list of settings and their values, see
<https://docs.djangoproject.com/en/5.2/ref/settings/>
"""

from pathlib import Path
from datetime import timedelta
import pymysql
import os
from dotenv import load_dotenv

# 加载环境变量
load_dotenv()

# 使用 pymysql 作为 MySQL 驱动
pymysql.install_as_MySQLdb()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See <https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/>

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-6hw9j9upli^t3g7m(58i67be^&(@-n9@xiuw*=varx@unx8&93")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() in ("true", "1", "yes", "on")

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",") if os.getenv("ALLOWED_HOSTS") else []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # apps/下的app
    "apps.articles",
    "apps.users",
    "apps.comments",
    # 添加 REST Framework
    "rest_framework",
    # 添加 Simple JWT 的令牌黑名单功能
    "rest_framework_simplejwt.token_blacklist",
    # 添加 CORS 头
    "corsheaders",
    # 添加 Django Guardian 对象级权限控制
    "guardian",
    # 添加 drf-spectacular 用于API文档生成
    "drf_spectacular",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # 添加 CORS 中间件（必须在 CommonMiddleware 之前）
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "utils.middleware.AdminOnlyMiddleware",  # 管理后台权限控制中间件（已修复）
    "utils.middleware.UserActivityMiddleware",  # 阶段9：用户活动统计中间件
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# <https://docs.djangoproject.com/en/5.2/ref/settings/#databases>

# 数据库配置 - 支持SQLite和MySQL
DATABASE_ENGINE = os.getenv("DATABASE_ENGINE", "django.db.backends.sqlite3")

if DATABASE_ENGINE == "django.db.backends.sqlite3":
    DATABASES = {
        "default": {
            "ENGINE": DATABASE_ENGINE,
            "NAME": BASE_DIR / os.getenv("DATABASE_NAME", "db.sqlite3"),
        }
    }
else:
    # MySQL 或其他数据库配置
    DATABASES = {
        "default": {
            "ENGINE": DATABASE_ENGINE,
            "NAME": os.getenv("DATABASE_NAME", "my_blog_platform"),
            "USER": os.getenv("DATABASE_USER", "root"),
            "PASSWORD": os.getenv("DATABASE_PASSWORD", ""),
            "HOST": os.getenv("DATABASE_HOST", "localhost"),
            "PORT": os.getenv("DATABASE_PORT", "3306"),
            "OPTIONS": {
                "charset": "utf8mb4",
                "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
            },
        }
    }


# Password validation
# <https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators>

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# <https://docs.djangoproject.com/en/5.2/topics/i18n/>

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# <https://docs.djangoproject.com/en/5.2/howto/static-files/>

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Media files (头像上传配置)
MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"
#############################
# 以后可以改成用bytes64写进数据库#
#############################

# Default primary key field type
# <https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field>

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REST Framework 配置
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    # 添加 drf-spectacular 作为默认的 schema 生成器
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# Simple JWT 配置
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=int(os.getenv("JWT_ACCESS_TOKEN_LIFETIME_MINUTES", "30"))),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=int(os.getenv("JWT_REFRESH_TOKEN_LIFETIME_DAYS", "1"))),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}

# CORS 配置
CORS_ALLOW_ALL_ORIGINS = os.getenv("CORS_ALLOW_ALL_ORIGINS", "True").lower() in ("true", "1", "yes", "on")

# 如果不允许所有源，则使用指定的域名列表
if not CORS_ALLOW_ALL_ORIGINS:
    cors_origins = os.getenv("CORS_ALLOWED_ORIGINS", "")
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins.split(",") if origin.strip()]

# 自定义用户模型
AUTH_USER_MODEL = "users.User"

# 邮件配置
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend")
EMAIL_HOST = os.getenv("EMAIL_HOST", "")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", "587"))
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True").lower() in ("true", "1", "yes", "on")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "2450414312@stu.tjise.edu.cn")

# 前端URL配置（用于邮件验证链接）
FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:3000")

# 文件上传配置
FILE_UPLOAD_MAX_MEMORY_SIZE = int(os.getenv("FILE_UPLOAD_MAX_MEMORY_SIZE", str(2 * 1024 * 1024)))  # 默认2MB
DATA_UPLOAD_MAX_MEMORY_SIZE = int(os.getenv("DATA_UPLOAD_MAX_MEMORY_SIZE", str(FILE_UPLOAD_MAX_MEMORY_SIZE)))

# Django Guardian 配置
AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",  # 默认认证后端
    "guardian.backends.ObjectPermissionBackend",  # Guardian对象权限后端
)

# Guardian 匿名用户配置
ANONYMOUS_USER_NAME = None  # 禁用匿名用户权限

# Redis缓存配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.getenv("REDIS_URL", "redis://127.0.0.1:6379/1"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {
                "max_connections": int(os.getenv("REDIS_MAX_CONNECTIONS", "50")),
                "decode_responses": True,
            },
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
            "IGNORE_EXCEPTIONS": True,  # 开发环境忽略Redis错误，避免缓存故障影响主服务
        },
    }
}

# 缓存键前缀设置
CACHE_KEY_PREFIX = os.getenv("CACHE_KEY_PREFIX", "blog_platform")

# 缓存超时设置（秒）
CACHE_TIMEOUT = {
    "hot_articles": int(os.getenv("CACHE_TIMEOUT_HOT_ARTICLES", "3600")),  # 热门文章缓存
    "article_detail": int(os.getenv("CACHE_TIMEOUT_ARTICLE_DETAIL", "1800")),  # 文章详情缓存
    "article_list": int(os.getenv("CACHE_TIMEOUT_ARTICLE_LIST", "600")),  # 文章列表缓存
    "search_results": int(os.getenv("CACHE_TIMEOUT_SEARCH_RESULTS", "300")),  # 搜索结果缓存
}

# drf-spectacular 配置
SPECTACULAR_SETTINGS = {
    "TITLE": os.getenv("API_TITLE", "博客平台 API"),
    "DESCRIPTION": os.getenv("API_DESCRIPTION", "一个功能完整的博客平台后端API，支持用户管理、文章发布、评论系统等功能"),
    "VERSION": os.getenv("API_VERSION", "1.0.0"),
    "SERVE_INCLUDE_SCHEMA": False,
    # 认证配置
    "COMPONENT_SPLIT_REQUEST": True,
    "COMPONENT_NO_READ_ONLY_REQUIRED": True,
    # JWT认证配置
    "SECURITY": [
        {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
        }
    ],
    # 标签配置
    "TAGS": [
        {"name": "用户管理", "description": "用户注册、登录、个人信息管理"},
        {"name": "文章管理", "description": "文章的创建、编辑、删除、查看和搜索"},
        {"name": "评论系统", "description": "文章评论的创建、查看和管理"},
    ],
    # 服务器配置
    "SERVERS": [
        {"url": os.getenv("API_SERVER_URL", "http://localhost:8000"), "description": os.getenv("API_SERVER_DESCRIPTION", "开发服务器")},
    ],
    # 联系信息
    "CONTACT": {
        "name": os.getenv("API_CONTACT_NAME", "博客平台开发团队"),
        "email": os.getenv("API_CONTACT_EMAIL", "2450414312@stu.tjise.edu.cn"),
    },
    # 许可证信息
    "LICENSE": {
        "name": os.getenv("API_LICENSE_NAME", "MIT License"),
    },
}
