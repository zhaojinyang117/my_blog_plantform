"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
<https://docs.djangoproject.com/en/5.2/topics/settings/>

For the full list of settings and their values, see
<https://docs.djangoproject.com/en/5.2/ref/settings/>
"""

from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See <https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/>

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-6hw9j9upli^t3g7m(58i67be^&(@-n9@xiuw*=varx@unx8&93"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "apps.articles",
    "apps.users",
    "apps.comments",
    # 添加 REST Framework
    "rest_framework",
    # 添加 Simple JWT 的令牌黑名单功能
    "rest_framework_simplejwt.token_blacklist",
    # 添加 CORS 头
    "corsheaders",
    # 添加 Django Guardian 对象级权限控制
    "guardian",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # 添加 CORS 中间件（必须在 CommonMiddleware 之前）
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "utils.middleware.AdminOnlyMiddleware",  # 管理后台权限控制中间件
    "utils.middleware.UserActivityMiddleware",  # 阶段9：用户活动统计中间件
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# <https://docs.djangoproject.com/en/5.2/ref/settings/#databases>

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# <https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators>

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# <https://docs.djangoproject.com/en/5.2/topics/i18n/>

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# <https://docs.djangoproject.com/en/5.2/howto/static-files/>

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Media files (头像上传配置)
MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"
#############################
#后续可以改成用bytes64写进数据库#
#############################

# Default primary key field type
# <https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field>

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REST Framework 配置
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}

# Simple JWT 配置
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}

# CORS 配置
CORS_ALLOW_ALL_ORIGINS = True  # 开发环境可以设置为 True，生产环境应该指定允许的域名
# 或者指定允许的域名
# CORS_ALLOWED_ORIGINS = [
#     "<http://localhost:3000>",
#     "<http://127.0.0.1:3000>",
# ]

# 自定义用户模型
AUTH_USER_MODEL = "users.User"

# 邮件配置
EMAIL_BACKEND = (
    "django.core.mail.backends.console.EmailBackend"  # 开发环境使用控制台输出
)
# 生产环境邮件配置示例（后面放进.env中）:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'  # 邮件服务器
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@gmail.com'
# EMAIL_HOST_PASSWORD = 'your-app-password'
DEFAULT_FROM_EMAIL = "noreply@blog.com"

# 前端URL配置（用于邮件验证链接, 等后面也放进.env里）
FRONTEND_URL = "<http://localhost:3000>"

# 文件上传配置
FILE_UPLOAD_MAX_MEMORY_SIZE = 2 * 1024 * 1024  # 2MB
DATA_UPLOAD_MAX_MEMORY_SIZE = FILE_UPLOAD_MAX_MEMORY_SIZE

# Django Guardian 配置
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # 默认认证后端
    'guardian.backends.ObjectPermissionBackend',  # Guardian对象权限后端
)

# Guardian 匿名用户配置
ANONYMOUS_USER_NAME = None  # 禁用匿名用户权限

# 阶段10：Redis缓存配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {
                "max_connections": 50,
                "decode_responses": True,
            },
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
            "IGNORE_EXCEPTIONS": True,  # 开发环境忽略Redis错误，避免缓存故障影响主服务
        }
    }
}

# 缓存键前缀设置
CACHE_KEY_PREFIX = "blog_platform"

# 缓存超时设置（秒）
CACHE_TIMEOUT = {
    "hot_articles": 3600,  # 热门文章缓存1小时
    "article_detail": 1800,  # 文章详情缓存30分钟
    "article_list": 600,  # 文章列表缓存10分钟
}
